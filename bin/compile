#!/usr/bin/env python3

import os
import shutil
import urllib.request
import urllib.parse
import subprocess
import re

HUGO_RELEASES_URI = "https://github.com/gohugoio/hugo/releases/"

# File tools ###############################################


def clear_dir(path):
    for item in os.listdir(path):
        item_path = os.path.join(path, item)
        if os.path.isfile(item_path):
            os.unlink(item_path)
        elif os.path.isdir(item_path):
            shutil.rmtree(item_path)


def download_file(uri, path):
    urllib.request.urlretrieve(uri, path)


def ensure_dir(path):
    os.makedirs(path, exist_ok=True)


def unpack_tarball(in_path, out_dir_path):
    subprocess.run(["tar", "xzf", in_path, "--directory", out_dir_path], check=True)


# Buildpack tools ##########################################


def buildpack_dir():
    return os.path.dirname(os.path.dirname(__file__))


def add_to_PATH(path):
    with open(os.path.join(buildpack_dir(), "export"), "w", encoding="utf-8") as f:
        f.write(f'export PATH="{os.environ["PATH"]}:{path}"\n')


def log_step(msg):
    print(f"-----> {msg}")


def log_info(msg):
    print(f"       {msg}")


# Hugo releases ############################################


def hugo_version(release_uri):
    return re.search(r"/v([\d\w.-]+)$", release_uri).group(1)


def get_latest_hugo_version():
    with urllib.request.urlopen(
        urllib.parse.urljoin(HUGO_RELEASES_URI, "latest")
    ) as response:
        if response.status != 200:
            raise RuntimeError(
                f"Unexpected response from Hugo releases page: {response.status}"
                f" {response.url}"
            )
        return hugo_version(response.url)


def tarball_name(version):
    return f"hugo_{version}_Linux-64bit.tar.gz"


def tarball_uri(version):
    return urllib.parse.urljoin(
        HUGO_RELEASES_URI, f"download/v{version}/{tarball_name(version)}"
    )


# Main #####################################################


def ensure_latest_hugo_binary(target_dir):
    latest_version = get_latest_hugo_version()
    tarball_path = os.path.join(target_dir, tarball_name(latest_version))

    if os.path.exists(tarball_path):
        return latest_version, "cache"

    clear_dir(target_dir)
    download_file(tarball_uri(latest_version), tarball_path)
    unpack_tarball(tarball_path, target_dir)

    return latest_version, "web"


def main(cache_dir_):
    ensure_dir(cache_dir_)

    log_step("Downloading latest Hugo if necessary")
    version, binary_source = ensure_latest_hugo_binary(cache_dir_)
    log_info(f"Hugo version: {version}")
    log_info(f"Hugo binary from: {binary_source}")

    log_step("Adding Hugo to PATH")
    add_to_PATH(cache_dir_)


if __name__ == "__main__":
    import sys

    _, cache_dir, _ = sys.argv
    main(cache_dir)
